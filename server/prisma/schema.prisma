// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // previewFeatures = ["interactiveTransactions"]
  // binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
  binaryTargets = ["native"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// user schemas

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile              UserProfile?
  personalAccessTokens PersonalAccessToken[]
}

model UserProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @unique @db.ObjectId
  openid    String?
  from      String?
  avatar    String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [uid], references: [id])
}

model PersonalAccessToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @db.ObjectId
  name      String
  token     String   @unique
  expiredAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [uid], references: [id])
}

// region schemas 

type RegionClusterConf {
  driver     String // kubernetes
  kubeconfig String?
}

type RegionDatabaseConf {
  driver        String // mongodb
  connectionUri String
}

type RegionGatewayConf {
  driver String // apisix
  domain String
  tls    Boolean
  apiUrl String
  apiKey String
}

type RegionStorageConf {
  driver           String // minio
  domain           String
  externalEndpoint String
  internalEndpoint String
  accessKey        String
  secretKey        String
}

model Region {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String             @unique
  displayName  String
  clusterConf  RegionClusterConf
  databaseConf RegionDatabaseConf
  gatewayConf  RegionGatewayConf
  storageConf  RegionStorageConf
  state        String             @default("active") // active, inactive

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications Application[]
  bundles      Bundle[]
}

model Bundle {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  displayName            String
  regionName             String
  limitCPU               Int // 1000 = 1 core
  limitMemory            Int // in MB
  requestCPU             Int // 1000 = 1 core
  requestMemory          Int // in MB
  databaseCapacity       Int // in MB
  storageCapacity        Int // in MB
  networkTrafficOutbound Int // in MB
  priority               Int    @default(0)
  state                  String @default("active") // active, inactive
  price                  Int    @default(0)

  region Region @relation(fields: [regionName], references: [name])

  applications Application[]

  @@unique([regionName, name])
}

type RuntimeImageGroup {
  main    String
  init    String?
  sidecar String?
}

model Runtime {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String            @unique
  type        String
  image       RuntimeImageGroup
  version     String
  latest      Boolean
  Application Application[]
}

// application schemas

enum ApplicationState {
  Running
  Stopped
  Restarting
}

enum ApplicationPhase {
  Creating
  Created
  Starting
  Started
  Stopping
  Stopped
  Deleting
  Deleted
}

model Application {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  appid       String           @unique
  regionName  String
  bundleName  String
  runtimeName String
  state       ApplicationState
  phase       ApplicationPhase
  tags        String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdBy   String           @db.ObjectId

  region  Region  @relation(fields: [regionName], references: [name])
  runtime Runtime @relation(fields: [runtimeName], references: [name])
  bundle  Bundle  @relation(fields: [regionName, bundleName], references: [regionName, name])

  configuration ApplicationConfiguration?
  storageUser   StorageUser?
  database      Database?
  domain        ApplicationDomain?
}

type EnvironmentVariable {
  name  String
  value String
}

model ApplicationConfiguration {
  id           String                @id @default(auto()) @map("_id") @db.ObjectId
  appid        String                @unique
  environments EnvironmentVariable[]
  dependencies String[]              @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application Application @relation(fields: [appid], references: [appid])
}

// storage schemas

model StorageUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  appid     String   @unique
  accessKey String
  secretKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application Application @relation(fields: [appid], references: [appid])
}

enum BucketPolicy {
  readwrite
  readonly
  private
}

model StorageBucket {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  appid     String
  name      String        @unique
  shortName String
  policy    BucketPolicy
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  domain    BucketDomain?
}

// database schemas

model Database {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  appid    String @unique
  name     String
  user     String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application Application @relation(fields: [appid], references: [appid])
}

model DatabasePolicy {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  appid     String
  name      String
  injector  String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  rules     DatabasePolicyRule[]

  @@unique([appid, name])
}

model DatabasePolicyRule {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  appid          String
  policyName     String
  collectionName String
  value          Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  policy DatabasePolicy @relation(fields: [appid, policyName], references: [appid, name])

  @@unique([appid, policyName, collectionName])
}

// cloud function schemas

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  HEAD
}

type CloudFunctionSource {
  code     String
  compiled String?
  uri      String?
  version  Int     @default(0)
  hash     String?
  lang     String?
}

model CloudFunction {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  appid     String
  name      String
  source    CloudFunctionSource
  desc      String
  tags      String[]
  websocket Boolean
  methods   HttpMethod[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  createdBy String              @db.ObjectId

  cronTriggers CronTrigger[]

  @@unique([appid, name])
}

model CronTrigger {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  appid     String
  desc      String
  cron      String
  target    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cloudFunction CloudFunction @relation(fields: [appid, target], references: [appid, name])
}

// gateway schemas

enum DomainState {
  Active
  Inactive
}

model ApplicationDomain {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  appid     String      @unique
  domain    String      @unique
  state     DomainState @default(Active)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  application Application @relation(fields: [appid], references: [appid])
}

model BucketDomain {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  appid      String
  bucketName String      @unique
  domain     String      @unique
  state      DomainState @default(Active)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  bucket StorageBucket @relation(fields: [bucketName], references: [name])
}
